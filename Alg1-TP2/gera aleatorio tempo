#include <bits/stdc++.h>

using namespace std;

const int MAX = 10000;
const int MIN = 1000;

int m[5010][5010];

int get(){
  int ret = rand()%(MAX-MIN);
  return ret+MIN;
}

int main(int argc, char const *argv[]) {

  if( argc != 3 ){
    printf("Invalid arguments\n");
    return 0;
  }

  ios_base::sync_with_stdio(false);

  int n = atoi(argv[1]);
  int num = atoi(argv[2]);

  srand(time(0));

  string file = "";
  ofstream out;

  for( int k=0; k<num; k++ ){
    for( int i=0; i<n; i++ ){
      for( int j=i+1; j<n; j++ ){
        m[i][j] = m[j][i] = get();
      }
    }
  }

    file = "";
    file += "file/graph";
    file += to_string(k+1);
    file += ".txt";

    out.open(file);

    out << n << endl;

    for( int i=0; i<n; i++ ){
      for( int j=0; j<n; j++ ){
        if( i == j ){
          out << -1 << " ";
        }else{
          out << m[i][j] << " ";
        }
      }
      out << endl;
    }

    out.close();
  }

  return 0;
}



voce pega a mediana das arestas
olha pra grafo so pra arestas menores ou iguais a mediana
se o grafo for conexo
 	descarta as maiores que a mediana

se nao, voce tem varios comp conecoxs ai voce faz um agrupamento dos desconexos e cada um deles fica um super no, voce anda recursivamente nesse grafo, voce faz outra chamada so que agora que seu grafo eh um super
	Se voce tem duas conexas voce tem um nó só,

Ele da varios pontos, isso sginifica que eh um grafo completo, cada ponto tem um caminho para outro ponto, no fim é um grafo completo nao direcionado ai nos temos n pontos e n*n-1/2 arestas. Teremos um array de aresta, uma struct 1 inteiro pro valor e dois outros inteiros pra cada vertice, cada vertice tem 0 a n-1 numero
 -> nao usa matriz de adjancencia, usa só um vetor de arestas



